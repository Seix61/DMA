
enclave {
    include "sys/socket.h"
    include "sys/select.h"
    include "netdb.h"
    include "poll.h"

    trusted {
        public void ecall_sgx_socket_hello(void);
    };

    untrusted {
        int u_socket (int domain, int type, int protocol) propagate_errno;
        int u_bind (int fd, [in, size=len] const struct sockaddr *addr, socklen_t len) propagate_errno;
        int u_listen (int fd, int n) propagate_errno;
        int u_accept (int fd, [out, size=addrlen_in] struct sockaddr *addr, socklen_t addrlen_in, [out] socklen_t *addrlen_out) propagate_errno;
        int u_connect (int fd, [in, size=len] const struct sockaddr *addr, socklen_t len) propagate_errno;
        ssize_t u_send (int fd, [in, size=n] const void *buf, size_t n, int flags) propagate_errno;
        ssize_t u_recv (int fd, [out, size=n] void *buf, size_t n, int flags) propagate_errno;
        int u_setsockopt (int fd, int level, int optname, [in, size=optlen] const void *optval, socklen_t optlen) propagate_errno;
        int u_close(int fd);
        int u_getpeername(int fd, [out, size=addrlen_in] struct sockaddr *addr, socklen_t addrlen_in, [out] socklen_t *addrlen_out);
        int u_getsockname(int fd, [out, size=addrlen_in] struct sockaddr *addr, socklen_t addrlen_in, [out] socklen_t *addrlen_out);
    };
};
